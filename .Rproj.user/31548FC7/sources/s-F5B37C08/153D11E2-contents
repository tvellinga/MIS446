---
title: "Into to R"
author: "Tristan"
date: "January 23, 2018"
output: html_document
---


# Course Setup
```{r setup_chunks, echo = FALSE}
knitr::opts_chunk$set(fig.width=12, fig.height=6, fig.cap = NULL) 
options(stringsAsFactors = FALSE)
options(scipen = 999)
```

```{r setup, message = FALSE, eval = FALSE, echo=FALSE, include=FALSE}
install.packages("tidyverse", "DT", "fivethirtyeight", "lubridate")


```

```{r library, echo=FALSE, include=FALSE}
library(tidyverse)
library(DT)
library(lubridate)
library(fivethirtyeight)
midwest<-midwest
DT::datatable(midwest)
```



# Creating a list (aka a vector)
```{r}
a<-c(1,3,5)
b<-list(1,3,5)
a[[1]]
```

#Character Vector

```{r character_vector}
# character vector
y <- c("apple", "apple", "banana", "kiwi", "bear", "strawberry", "strawberry")
length(y)
```


# Numeric Vector
```{r numeric_vector}
# numeric vector
numbers <- rep(3, 99)
numbers
```


# R works as a calculator
```{r calc}
1 + 2 - 3
5 * 7
2/1
```

# R Calculator 2
```{r calc2}
sqrt(4)
2^2
```



# Can save objects to use later
```{r object}
x <- 1 + 3
x
```

```{r object2}
x * 3
```

# R is case sensitive
```{r case, error = TRUE}
case_sensitive <- 10
Case_sensitive
```

# Data frames
 Think of these as excel sheets. Just tabular data.
```{r}
glimpse(midwest)
datatable(midwest)

# First n observations
head(midwest, 10)

# Last n observations
tail(midwest, 10)

# Access variables/columns
midwest$state
midwest$state[midwest$county=='MORGAN']

# Get unique values
unique(midwest$state)

# Create a table variable(s)
table(midwest$state)
mytable<-table(congress_age$party, congress_age$incumbent)
mytable
# margin.table(mytable, 1)
# 100*prop.table(mytable)
# descr::CrossTable(congress_age$party, congress_age$incumbent, prop.chisq=FALSE, prop.t = FALSE)
# crosstab
```
 

# R Functions
```{r rnorm}
set.seed(1)
rnorm(n = 5, mean = 0, sd = 1)
```
```{r rnorm2}
set.seed(1)
rnorm(5, 0, 1)
```
```{r rnorm3}
set.seed(1)
rnorm(sd = 1, n = 5, mean = 0)
```

# Working through Errors
1. Use `?function_name` to explore the details of the function. The examples at the bottom of every R help page can be especially helpful.
    + <https://www.rdocumentation.org/> provided by DataCamp is a great alternative as well.
2. If this does not help, copy and paste the error and search on the internet.

# Using `dplyr` for data manipulation
The `dplyr` package uses verbs for common data manipulation tasks. These include:

- `filter()`
- `count()`
- `arrange()`
- `select()`
- `mutate()`
- `summarise()`

# Data
<https://fivethirtyeight.com/features/both-republicans-and-democrats-have-an-age-problem/>

```{r fivethirtyeight, eval = FALSE}
install.packages('fivethirtyeight')
library(fivethirtyeight)
```

```{r congress, echo = FALSE}
congress_age<-fivethirtyeight::congress_age
DT::datatable(congress_age[1:100, ])
```


# Using `filter`
```{r 80th}
filter(congress_age, congress == 80)
```

# Save filtered results to object
```{r 80th_save}
congress_80 <- filter(congress_age, congress == 80)
```

# Other operators for numbers
- `>`
- `<`
- `>=`
- `<=`


# Filter character variables
```{r senate}
senate <- filter(congress_age, chamber == 'senate')
```

# Combine Operations - AND
```{r 80senate}
filter(congress_age, congress == 80, chamber == 'senate')
```

# Equivalent AND Statement
```{r 80senate2}
filter(congress_age, congress == 80 & chamber == 'senate')
```

# Filter - OR
```{r filter_or}
filter(congress_age, congress == 80 | congress == 81)
```

# `%in%`
```{r filter_2}
filter(congress_age, congress %in% c(80, 81))
```

# Not Operator
```{r not_80}
filter(congress_age, congress != 80)
```

# Not Operator 2
```{r 80_notsenate}
filter(congress_age, congress == 80 & !chamber == 'senate')
```

# Working with logicals
```{r logicals}
filter(congress_age, incumbent)
```



# All boolean options
![](boolean.png)

# Using `count`
```{r count}
count(congress_age, party)
count(congress_age, incumbent)
```

# Using `arrange`
```{r simple_arrange}
arrange(congress_age, state)
```

# Add more variables
```{r two_arrange}
arrange(congress_age, state, party)
```

# Descending Order
```{r descend}
arrange(congress_age, desc(congress))
```


# Using `select`
```{r select}
select(congress_age, congress, chamber, party, age)
```

# Helper functions
- `starts_with()`
- `ends_with()`
- `contains()`
- `matches()`
- `num_range()`
- `:`
- `everything()`

# `starts_with` helper
```{r starts_with}
select(congress_age, starts_with('s'))
```


# Contains helper
```{r contains}
select(congress_age, contains('name'))
```

# Colon
```{r colon}
select(congress_age, congress:birthday)
```

# Drop variables
```{r drop}
select(congress_age, -firstname, -state, -party, -incumbent, -chamber)
```

# Reorder with `everything`
```{r reorder}
select(congress_age, congress, chamber, incumbent, age, everything())
```

# `rename` function
```{r rename}
rename(congress_age, first_name = firstname, last_name = lastname)
```



# Using `mutate`
```{r mutate, error = FALSE}
congress_red <- select(congress_age, congress, chamber, state, party)

mutate(congress_red, 
       democrat = ifelse(party == 'D', 1, 0),
       num_democrat = sum(democrat)
       )
```


# Using `summarise`
```{r summarise}
congress_2 <- mutate(congress_age, 
       democrat = ifelse(party == 'D', 1, 0)
       )

summarise(congress_2, 
          num_democrat = sum(democrat)
          )
```

# `group_by`
```{r group_by}
congress_grp <- group_by(congress_2, congress)

summarise(congress_grp, 
          num_democrat = sum(democrat),
          total = n(),
          prop_democrat = num_democrat / total
)
```

# Explore trend
```{r trend, eval = FALSE}
num_dem <- summarise(congress_grp, 
                     num_democrat = sum(democrat),
                     total = n(),
                     prop_democrat = num_democrat / total
)
ggplot(num_dem, aes(x = congress, y = prop_democrat)) + 
  geom_line()
```

# Explore trend output
```{r trend2, echo = FALSE}
num_dem <- summarise(congress_grp, 
                     num_democrat = sum(democrat),
                     total = n(),
                     prop_democrat = num_democrat / total
)
ggplot(num_dem, aes(x = congress, y = prop_democrat)) + 
  geom_line()
```



# `group_by` with `mutate`
```{r mutate_group, eval = FALSE}
congress_red <- select(congress_age, congress, chamber, state, party)
congress_grp <- group_by(congress_red, congress)

mutate(congress_grp, 
       democrat = ifelse(party == 'D', 1, 0),
       num_democrat = sum(democrat),
       total = n(),
       prop_democrat = num_democrat / total
)
```

# `group_by` with `mutate` output
```{r mutate_group2, echo = FALSE}
congress_red <- select(congress_age, congress, chamber, state, party)
congress_grp <- group_by(congress_red, congress)

mutate(congress_grp, 
       democrat = ifelse(party == 'D', 1, 0),
       num_democrat = sum(democrat),
       total = n(),
       prop_democrat = num_democrat / total
)
```

# Chaining operations
```{r chain_difficult, eval = FALSE}
summarise(
  group_by(
    mutate(
      filter(
        congress_age, congress >= 100
      ), 
      democrat = ifelse(party == 'D', 1, 0)
    ),
    congress, chamber
  ),
  num_democrat = sum(democrat),
  total = n(),
  prop_democrat = num_democrat / total
)
```

# The pipe `%>%` is the answer
The keyboard shortcut to insert the pipe operator is CTRL+SHIFT+M
```{r pipe, eval = FALSE}
congress_age %>%
  filter(congress >= 100) %>%
  mutate(democrat = ifelse(party == 'D', 1, 0)) %>%
  group_by(congress, chamber) %>%
  summarise(
    num_democrat = sum(democrat),
    total = n(),
    prop_democrat = num_democrat / total
  )
```

# The two are identical
```{r identical}
pipe_congress <- congress_age %>%
  filter(congress >= 100) %>%
  mutate(democrat = ifelse(party == 'D', 1, 0)) %>%
  group_by(congress, chamber) %>%
  summarise(
    num_democrat = sum(democrat),
    total = n(),
    prop_democrat = num_democrat / total
  )

nested_congress <- summarise(
  group_by(
    mutate(
      filter(
        congress_age, congress >= 100
      ), 
      democrat = ifelse(party == 'D', 1, 0)
    ),
    congress, chamber
  ),
  num_democrat = sum(democrat),
  total = n(),
  prop_democrat = num_democrat / total
)

identical(pipe_congress, nested_congress)
```

# Other Useful dplyr functions
There are a set of functions that can greatly simplify data operations. These functions end with:

+ `*_if` 
+ `*_each` 
+ `*_all`
+ `*_at`

# Simple example
```{r rename_if}
rename_if(congress_age, is.character, toupper)
```

# More realistic example
```{r summarise_if}
starwars %>%
  group_by(species, gender) %>%
  summarise_if(is.numeric, mean, na.rm = TRUE)
```

# Can call more than one function
```{r summarise_if2}
new_starwars_data<-starwars %>%
  group_by(species, gender) %>%
  summarise_if(is.numeric, funs(mean, median), na.rm = TRUE) %>%
  add_tally() %>% 
  arrange(species)
datatable(new_starwars_data)
```


# First ggplot
```{r plot1}
ggplot(data = midwest) +
  geom_point(mapping = aes(x = popdensity, y = percollege))
```

# Equivalent Code
```{r plot1_reduced}
ggplot(midwest) +
  geom_point(aes(x = popdensity, y = percollege))
```



# Equivalent Code
```{r plot1_reduced2}
ggplot(midwest,aes(x = popdensity, y = percollege)) +
  geom_point()
```


# Additional Geoms
```{r smooth, message = FALSE}
ggplot(midwest, aes(state, percollege)) +geom_bar(stat = "summary", fun.y = "mean")

```

# Add more Aesthetics
```{r smooth_states, message = FALSE}
ggplot(midwest) +
  geom_smooth(aes(x = popdensity, y = percollege, linetype = state), 
              se = FALSE)
```


# Layered ggplot

```{r two_geoms, message = FALSE}
ggplot(midwest, 
       aes(x = popdensity, y = percollege, color = state)) +
  geom_point() +
  geom_smooth()
```


```{r differ_aes, message = FALSE, echo = FALSE}
ggplot(midwest, aes(x = popdensity, y = percollege)) +
  geom_point(aes(color = state)) +
  geom_smooth(se = FALSE)

ggplot(midwest, aes(x = popdensity, y = percollege, group=state)) +
  geom_point(aes(color = state)) +
  geom_smooth(se = FALSE)
```

# Brief plot customization
```{r breaks_x, eval = FALSE}
ggplot(midwest, 
       aes(x = popdensity, y = percollege, color = state)) +
  geom_point() + 
  scale_x_continuous("Population Density", 
                     breaks = seq(0, 80000, 20000)) + 
  scale_y_continuous("Percent College Graduates") + 
  scale_color_discrete("State")
```

# Brief plot customization Output
```{r breaks_x2, echo = FALSE}
ggplot(midwest, 
       aes(x = popdensity, y = percollege, color = state)) +
  geom_point() + 
  scale_x_continuous("Population Density", 
                     breaks = seq(0, 80000, 20000)) + 
  scale_y_continuous("Percent College Graduates") + 
  scale_color_discrete("State")
```


# Create Small multiples
```{r plot1_reduced_color}

plot1<-ggplot(midwest, 
       aes(x = popdensity, y = percollege, color = state)) +
  geom_point() + 
  geom_smooth(method='loess')+
  scale_x_continuous("Population Density", 
                     breaks = seq(0, 80000, 20000)) + 
  scale_y_continuous("Percent College Graduates") + 
  scale_color_discrete("State")
plot1

plot1+facet_wrap(~state)


```


# Additional Geoms
* geom_line
* geom_point
* geom_bar
* geom_boxplot
```{r}
ggplot(congress_age, aes(state, age))+geom_boxplot()
```



# Additional Resources
+ R for Data Science: <http://r4ds.had.co.nz/>


